using System;
using System.Collections.Generic;
using System.Threading;

namespace Esc0
{

    class Program
    {
        enum Item { Knife, LaboratoryPassword, Medkit, KeyCard }
        static List<Item> inventory = new List<Item>();

        static void TypeText(string text, ConsoleColor color, int speed = 30)
        {
            Console.ForegroundColor = color;
            foreach (char c in text)
            {
                Console.Write(c);
                Thread.Sleep(speed);
            }
            Console.WriteLine();
            Console.ResetColor();
        }

        static string GetItemName(Item item)
        {
            switch (item)
            {
                case Item.Knife: return "–ú–∞–∫–µ—Ç–Ω—ã–π –Ω–æ–∂";
                case Item.LaboratoryPassword: return "–ö–æ–¥ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏";
                case Item.Medkit: return "–ê–ø—Ç–µ—á–∫–∞";
                case Item.KeyCard: return "–ö–ª—é—á-–∫–∞—Ä—Ç–∞";
                default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç";
            }
        }

        static string ActionInput()
        {
            Console.ForegroundColor = ConsoleColor.White;
            string input = Console.ReadLine();
            Console.ResetColor();
            return input?.Trim().ToLower() ?? string.Empty;
        }

        static void ShowInventory()
        {
            Console.Clear();
            TypeText("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó", ConsoleColor.Gray);
            TypeText("‚ïë            –ò –ù –í –ï –ù –¢ –ê –† –¨           ‚ïë", ConsoleColor.Gray);
            TypeText("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù", ConsoleColor.Gray);
            if (inventory.Count == 0)
            {
                TypeText("\n>>> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", ConsoleColor.Gray);
            }
            else
            {
                for (int i = 0; i < inventory.Count; i++)
                {
                    TypeText($"  [{i + 1}] {GetItemName(inventory[i])}", ConsoleColor.Gray);
                }
            }
            TypeText("\n–ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...", ConsoleColor.Gray);
            Console.ReadLine();
        }

        static void Main()
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            bool haveKnife = false;
            bool doorUnlocked = false;
            bool knowCodeForLab = false;
            bool searchedRoom = false;
            bool haveKeyCard = false;

            TypeText("\n... ... ...", ConsoleColor.DarkYellow);
            TypeText("–ì–æ–ª–æ–≤–∞ –±–æ–ª–∏—Ç...", ConsoleColor.DarkYellow);
            TypeText("\n>>> –û—Å—Ç–∞—Ç—å—Å—è –ª–µ–∂–∞—Ç—å (1)", ConsoleColor.DarkYellow);
            TypeText(">>> –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞ (2)", ConsoleColor.DarkYellow);

            string choice1 = ActionInput();
            switch (choice1)
            {
                case "1":
                    TypeText("\n–¢—ã –ø–æ–≥—Ä—É–∂–∞–µ—à—å—Å—è –≤–æ —Ç—å–º—É —Å–Ω–æ–≤–∞...", ConsoleColor.DarkYellow);
                    TypeText("... ... ...", ConsoleColor.Red);
                    TypeText("–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –∫–∞–∫ —á—Ç–æ-—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –µ—Å—Ç—å —Ç–≤–æ–∏ –Ω–æ–≥–∏...", ConsoleColor.Red);
                    TypeText("\nüíÄ –¢ –´  –£ –ú –ï –† üíÄ", ConsoleColor.Red);
                    TypeText("\n–ù–∞–∂–º–∏ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...", ConsoleColor.DarkYellow);
                    Console.ReadKey(true);
                    return;
                case "2":
                    TypeText("\n–ß–µ—Ä–µ–∑ –±–æ–ª—å –≤ –≥–æ–ª–æ–≤–µ —Ç—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –≥–ª–∞–∑–∞...", ConsoleColor.DarkYellow);
                    TypeText("...—Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–≤ –≤–∑–≥–ª—è–¥ ‚Äî –ø–æ–Ω–∏–º–∞–µ—à—å —á—Ç–æ —Ç—ã –≤...", ConsoleColor.DarkYellow);
                    TypeText("–≤ –ø–æ–¥—Å–æ–±–∫–µ —É–±–æ—Ä—â–∏–∫–∞....", ConsoleColor.DarkYellow);
                    TypeText("–∏–∑ –æ–∫–æ–Ω - –≤—ã—Ö–æ–¥—è—â–∏—Ö –≤ –∫–æ—Ä–∏–¥–æ—Ä,", ConsoleColor.DarkYellow);
                    TypeText("–ø–∞–¥–∞–ª –∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç ‚Äî –æ–ø–æ–≤–µ—â–∞—é—â–∏–π –æ —Å–µ—Ä—å–µ–∑–Ω–æ–π –∞–≤–∞—Ä–∏–∏: '–ü—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ¬ß1.2'.", ConsoleColor.DarkYellow);
                    TypeText("–ï—Å–ª–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—É, —Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.", ConsoleColor.DarkYellow);
                    break;
                default:
                    TypeText("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", ConsoleColor.DarkYellow);
                    return;
            }

            // Room exploration loop
            while (true)
            {
                Console.WriteLine();
                TypeText(">>> –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã (1)", ConsoleColor.DarkYellow);
                TypeText(">>> –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è (2)", ConsoleColor.DarkYellow);
                if (haveKnife)
                {
                    TypeText(">>> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (3)", ConsoleColor.DarkYellow);
                }

                string choice2 = ActionInput();
                switch (choice2)
                {
                    case "3":
                        if (haveKnife)
                        {
                            ShowInventory();
                        }
                        else
                        {
                            TypeText("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ConsoleColor.DarkYellow);
                        }
                        break;

                    case "2":
                        if (!searchedRoom)
                        {
                            TypeText("\n–û—Å–º–æ—Ç—Ä–µ–≤ –∫–æ–º–Ω–∞—Ç—É —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –º–∞–∫–µ—Ç–Ω—ã–π –Ω–æ–∂.", ConsoleColor.DarkYellow);
                            inventory.Add(Item.Knife);
                            haveKnife = true;
                            searchedRoom = true;
                            TypeText("‚úì –ú–∞–∫–µ—Ç–Ω—ã–π –Ω–æ–∂ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", ConsoleColor.Green);
                        }
                        else
                        {
                            TypeText("–¢—ã —É–∂–µ –Ω–∞—à–µ–ª –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∑–¥–µ—Å—å", ConsoleColor.DarkYellow);
                        }
                        break;

                    case "1":
                        if (!haveKnife)
                        {
                            TypeText("\n–¢—ã –Ω–µ —Å—Ç–∞–ª —Ç—Ä–∞—Ç–∏—Ç—å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Å–º–æ—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã –∏ –≤—ã—à–µ–ª –≤ –∫–æ—Ä–∏–¥–æ—Ä.", ConsoleColor.DarkYellow);
                        }
                        else
                        {
                            TypeText("\n–û—Å–º–æ—Ç—Ä–µ–≤—à–∏—Å—å –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –∫–∞–º–æ—Ä–∫–∏...", ConsoleColor.DarkYellow);
                        }
                        goto CorridorSection;
                    default:
                        TypeText("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ConsoleColor.DarkYellow);
                        break;
                }
            }

        CorridorSection:
            TypeText("\n–ù–∞ —Å—Ç–µ–Ω–µ –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ —Ç—ã –≤–∏–¥–∏—à—å —Ç–∞–±–ª–∏—á–∫—É:", ConsoleColor.DarkYellow);
            TypeText("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó", ConsoleColor.Green);
            TypeText("‚ïë                                          ‚ïë", ConsoleColor.Green);
            TypeText("‚ïë             [ –ó –û –ù –ê  07 ]              ‚ïë", ConsoleColor.Green);
            TypeText("‚ïë                                          ‚ïë", ConsoleColor.Green);
            TypeText("‚ïë        << –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è | –°–∫–ª–∞–¥ >>         ‚ïë", ConsoleColor.Green);
            TypeText("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù", ConsoleColor.Green);

            // Main corridor loop
            while (true)
            {
                Console.WriteLine();
                TypeText(">>> –ò–¥—Ç–∏ –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (1)", ConsoleColor.DarkYellow);
                TypeText(">>> –ò–¥—Ç–∏ –∫ —Å–∫–ª–∞–¥—É (2)", ConsoleColor.DarkYellow);
                TypeText(">>> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (3)", ConsoleColor.DarkYellow);
                TypeText(">>> –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã (0)", ConsoleColor.DarkYellow);

                string choice3 = ActionInput();
                switch (choice3)
                {
                    case "2":
                        HandleWarehouse(ref knowCodeForLab, ref haveKeyCard);
                        break;
                    case "1":
                        HandleLaboratory(ref doorUnlocked, knowCodeForLab);
                        break;
                    case "3":
                        ShowInventory();
                        break;
                    case "0":
                        TypeText("\n–ü–æ–∂–∞–ª—É–π —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤—ã—Ö–æ–¥, –Ω–æ –æ–Ω –∂–µ –∑–¥–µ—Å—å –Ω–µ –æ–¥–∏–Ω.", ConsoleColor.DarkYellow);
                        TypeText("\n–ù–∞–∂–º–∏ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...", ConsoleColor.DarkYellow);
                        Console.ReadKey(true);
                        return;
                    default:
                        TypeText("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ConsoleColor.DarkYellow);
                        break;
                }
            }
        }

        static void HandleWarehouse(ref bool knowCodeForLab, ref bool haveKeyCard)
        {
            TypeText("\n–¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Å–∫–ª–∞–¥—É...", ConsoleColor.DarkYellow);
            TypeText("–í–æ–∑–ª–µ —Å–∫–ª–∞–¥–∞ —Ä–∞–∑–≤–∏–ª–∫–∞", ConsoleColor.DarkYellow);
            TypeText("–ù–∞ —Ç–∞–±–ª–∏—á–∫–µ –Ω–∞–ø–∏—Å–∞–Ω–æ:", ConsoleColor.DarkYellow);
            TypeText("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó", ConsoleColor.Green);
            TypeText("‚ïë                                          ‚ïë", ConsoleColor.Green);
            TypeText("‚ïë             [ –ó –û –ù –ê  07 ]              ‚ïë", ConsoleColor.Green);
            TypeText("‚ïë                [ –°–∫–ª–∞–¥ ]                 ‚ïë", ConsoleColor.Green);
            TypeText("‚ïë                                          ‚ïë", ConsoleColor.Green);
            TypeText("‚ïë        << –°–µ—Ä–≤–µ—Ä–Ω–∞—è | –ò–∑–æ–ª—è—Ç–æ—Ä >>        ‚ïë", ConsoleColor.Green);
            TypeText("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù", ConsoleColor.Green);

            while (true)
            {
                Console.WriteLine();
                TypeText(">>> –ó–∞–π—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥ (1)", ConsoleColor.DarkYellow);
                TypeText(">>> –ò–¥—Ç–∏ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é (2)", ConsoleColor.DarkYellow);
                TypeText(">>> –ò–¥—Ç–∏ –∫ –∏–∑–æ–ª—è—Ç–æ—Ä—É (3)", ConsoleColor.DarkYellow);
                TypeText(">>> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (4)", ConsoleColor.DarkYellow);
                TypeText(">>> –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ (0)", ConsoleColor.DarkYellow);

                string choice = ActionInput();
                switch (choice)
                {
                    case "1":
                        TypeText("\n–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ —Å–∫–ª–∞–¥...", ConsoleColor.DarkYellow);
                        TypeText("–ù–∞ –ø–æ–ª–∫–∞—Ö –ª–µ–∂–∞—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ—Ä–æ–±–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.", ConsoleColor.DarkYellow);
                        if (!inventory.Contains(Item.Medkit))
                        {
                            TypeText("–ù–∞ —Å—Ç–æ–ª–µ —Ç—ã –∑–∞–º–µ—á–∞–µ—à—å –∞–ø—Ç–µ—á–∫—É.", ConsoleColor.DarkYellow);
                            inventory.Add(Item.Medkit);
                            TypeText("‚úì –ê–ø—Ç–µ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", ConsoleColor.Green);
                        }
                        else
                        {
                            TypeText("–ó–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ—Ç.", ConsoleColor.DarkYellow);
                        }
                        break;
                    case "2":
                        TypeText("\n–¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π...", ConsoleColor.DarkYellow);
                        TypeText("–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –¥–≤–µ—Ä—å –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç.", ConsoleColor.DarkYellow);
                        if (haveKeyCard)
                        {
                            TypeText("–¢—ã –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–µ—à—å –∫–ª—é—á-–∫–∞—Ä—Ç—É.", ConsoleColor.DarkYellow);
                            TypeText("‚úì –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è!", ConsoleColor.Green);
                            TypeText("\n–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é...", ConsoleColor.DarkYellow);
                            TypeText("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ —Å—Ç–æ–π–∫–∞–º–∏.", ConsoleColor.DarkYellow);
                            if (!knowCodeForLab)
                            {
                                TypeText("–ù–∞ –æ–¥–Ω–æ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —Ç—ã –≤–∏–¥–∏—à—å –∑–∞–ø–∏—Å–∫—É:", ConsoleColor.DarkYellow);
                                TypeText("\n'–ö–æ–¥ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏: 15247'", ConsoleColor.Green);
                                knowCodeForLab = true;
                                TypeText("‚úì –¢—ã –∑–∞–ø–æ–º–Ω–∏–ª –∫–æ–¥", ConsoleColor.Green);
                            }
                            else
                            {
                                TypeText("–¢—ã —É–∂–µ –±—ã–ª –∑–¥–µ—Å—å.", ConsoleColor.DarkYellow);
                            }
                        }
                        else
                        {
                            TypeText("–í–∏–¥–∏–º–æ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∫–ª—é—á-–∫–∞—Ä—Ç–∞.", ConsoleColor.DarkYellow);
                        }
                        break;
                    case "3":
                        TypeText("\n–ù–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç...", ConsoleColor.DarkYellow);
                        TypeText("–¢—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—à—å –≤–Ω—É—Ç—Ä—å.", ConsoleColor.DarkYellow);
                        TypeText("–í —É–≥–ª—É –∫–∞–º–µ—Ä—ã –ª–µ–∂–∏—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫.", ConsoleColor.DarkYellow);
                        if (!haveKeyCard)
                        {
                            TypeText("–ù–∞ –µ–≥–æ –ø–æ—è—Å–µ –≤–∏—Å–∏—Ç –∫–ª—é—á-–∫–∞—Ä—Ç–∞.", ConsoleColor.DarkYellow);
                            TypeText("–¢—ã –∑–∞–±–∏—Ä–∞–µ—à—å –µ—ë.", ConsoleColor.DarkYellow);
                            inventory.Add(Item.KeyCard);
                            haveKeyCard = true;
                            TypeText("‚úì –ö–ª—é—á-–∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", ConsoleColor.Green);
                        }
                        else
                        {
                            TypeText("–ë–æ–ª—å—à–µ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.", ConsoleColor.DarkYellow);
                        }
                        break;
                    case "4":
                        ShowInventory();
                        break;
                    case "0":
                        TypeText("\n–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –≤ –∫–æ—Ä–∏–¥–æ—Ä...", ConsoleColor.DarkYellow);
                        return;
                    default:
                        TypeText("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ConsoleColor.DarkYellow);
                        break;
                }
            }
        }

        static void HandleLaboratory(ref bool doorUnlocked, bool knowCodeForLab)
        {
            TypeText("\n–¢—ã –∏–¥–µ—à—å –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏...", ConsoleColor.DarkYellow);
            while (true)
            {
                if (!doorUnlocked)
                {
                    TypeText("–¢—ã –≤–∏–¥–∏—à—å –¥–≤–µ—Ä—å —Å –∫–æ–¥–æ–≤—ã–º –∑–∞–º–∫–æ–º...", ConsoleColor.DarkYellow);
                    Console.WriteLine();
                    if (knowCodeForLab)
                    {
                        TypeText(">>> –í–≤–µ—Å—Ç–∏ –∫–æ–¥ (1)", ConsoleColor.DarkYellow);
                    }
                    else
                    {
                        TypeText(">>> –í–∑–ª–æ–º–∞—Ç—å –ø–∞—Ä–æ–ª—å (1)", ConsoleColor.DarkYellow);
                    }
                    TypeText(">>> –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ (2)", ConsoleColor.DarkYellow);
                    TypeText(">>> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (3)", ConsoleColor.DarkYellow);

                    string choice = ActionInput();
                    switch (choice)
                    {
                        case "1":
                            if (knowCodeForLab)
                            {
                                TypeText("\n–í–≤–µ–¥–∏ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:", ConsoleColor.DarkYellow);
                                string codeInput = ActionInput();
                                if (codeInput == "15247")
                                {
                                    TypeText("‚úì –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç!", ConsoleColor.Green);
                                    TypeText("–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–æ —â–µ–ª—á–∫–æ–º...", ConsoleColor.DarkYellow);
                                    doorUnlocked = true;
                                    TypeText("\n–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é...", ConsoleColor.DarkYellow);
                                    TypeText("–í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø–æ–ª—É–ø—É—Å—Ç–æ, –Ω–æ –Ω–∞ —Å—Ç–æ–ª–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å.", ConsoleColor.DarkYellow);
                                }
                                else
                                {
                                    TypeText("‚úó –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ó–∞–º–æ–∫ –∏–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —Å–∏–≥–Ω–∞–ª.", ConsoleColor.Red);
                                }
                            }
                            else
                            {
                                TypeText("\n–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –≤–∑–ª–æ–º–∞—Ç—å –∑–∞–º–æ–∫, –Ω–æ –±–µ–∑—É—Å–ø–µ—à–Ω–æ.", ConsoleColor.DarkYellow);
                                TypeText("–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–¥ –∏–ª–∏ –∫–ª—é—á.", ConsoleColor.DarkYellow);
                            }
                            break;
                        case "2":
                            TypeText("\n–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –≤ –∫–æ—Ä–∏–¥–æ—Ä...", ConsoleColor.DarkYellow);
                            return;
                        case "3":
                            ShowInventory();
                            break;
                        default:
                            TypeText("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ConsoleColor.DarkYellow);
                            break;
                    }
                }
                else
                {
                    TypeText("\n–¢—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏...", ConsoleColor.DarkYellow);
                    Console.WriteLine();
                    TypeText(">>> –û—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é (1)", ConsoleColor.DarkYellow);
                    if (inventory.Contains(Item.Medkit))
                    {
                        TypeText(">>> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ø—Ç–µ—á–∫—É (2)", ConsoleColor.DarkYellow);
                    }
                    TypeText(">>> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (3)", ConsoleColor.DarkYellow);
                    TypeText(">>> –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ (0)", ConsoleColor.DarkYellow);

                    string choice = ActionInput();
                    switch (choice)
                    {
                        case "1":
                            TypeText("\n–¢—ã –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é...", ConsoleColor.DarkYellow);
                            TypeText("–ù–∞ —Å—Ç–µ–Ω–∞—Ö –≤–∏—Å—è—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã.", ConsoleColor.DarkYellow);
                            TypeText("–í —É–≥–ª—É —Å—Ç–æ–∏—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.", ConsoleColor.DarkYellow);
                            TypeText("\n(–î–∞–ª—å—à–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞...)", ConsoleColor.DarkYellow);
                            break;
                        case "2":
                            if (inventory.Contains(Item.Medkit))
                            {
                                TypeText("\n–¢—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –∞–ø—Ç–µ—á–∫—É...", ConsoleColor.DarkYellow);
                                TypeText("–¢—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å —Ä–∞–Ω—ã –∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ª—É—á—à–µ.", ConsoleColor.DarkYellow);
                                inventory.Remove(Item.Medkit);
                                TypeText("‚úì –ê–ø—Ç–µ—á–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞", ConsoleColor.Green);
                            }
                            else
                            {
                                TypeText("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–ø—Ç–µ—á–∫–∏.", ConsoleColor.DarkYellow);
                            }
                            break;
                        case "3":
                            ShowInventory();
                            break;
                        case "0":
                            TypeText("\n–¢—ã –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏...", ConsoleColor.DarkYellow);
                            return;
                        default:
                            TypeText("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ConsoleColor.DarkYellow);
                            break;
                    }
                }
            }
        }
    }

}
